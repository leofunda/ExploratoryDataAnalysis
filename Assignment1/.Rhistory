LETTERS
letters
sample(LETTERS)
sample()
sample(c(0, 1),100, replace=TRUE, prob = c(0.3, 0.7))
flips = sample(c(0, 1),100, replace=TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1),100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips2= rbinom(1, size = 100, prob = 0.7)
flips2= rbinom(1, size = 1, prob = 0.7)
flips2 <- rbinom(1, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
?rpois
rpois(5)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm = colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x=cars$dist, y=cars$speed)
?plot
plot(x=cars$dist, y=cars$speed, xlab= Speed)
plot(x=cars$dist, y=cars$speed, xlab= "Speed")
plot(x=cars$speed, y=cars$dist, xlab= "Speed")
plot(x=cars$speed, y=cars$dist, xlab= "Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab= "Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
load(mtcars)
data(mtcars)
?boxplot()
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library("swirl")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
print(tbl_df)
cran
?select
select(cran, ip_id, package
)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500 & r_os == "linux-gnu")
filter(cran, size>100500 & r_os == "linux-gnu")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !(is.na(r_version)
)
)
filter(cran, !is.na(r_version)
)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran, size_gb = size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3,size_mb = size /2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
bye()
library("swirl")
swirl()
bye()
swirl()
library(dplyr)
swirl()
cran <- tbl_df(mydf)
rm("mydf")
cran
gtoup_by(cran, packageName)
group_by(cran, packageName)
group_by(cran, package)
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
n()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(packsum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(top_counts_sorted$unique, probs=c(0.99))
quantile(pack_sum$unique, probs=c(0.99))
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(cran)
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
reset()
submit()
reset()
?gather
submit()
submit
submit()
submit()
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
unique()
?unique()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
library("swirl")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
month()
month(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2/")
ymd(1920/1/2)
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tzone="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(arrive, last_time)
how_long <- new_interval(last_time, new_interval)
how_long <- new_interval(last_time, new_interval)
how_long <- new_interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
View(by_package)
View(by_package)
View(by_package)
library(stats)
install.packages("xtable")
opts_chunk$set(echo=FALSE, results="hide")
?opts_chunk
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(pps)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12)
abline(v = 12, lwd=2)
abline(v = median(ppm),col="magenta", lwd=4)
names(pollution)
table(region)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg$wheat)
barplot(reg)
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region)
boxplot(pm25~region, data=pollution, col"red")
boxplot(pm25~region,pollution, col"red")
boxplot(pm25~region,pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution)
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25)
hist(east$pm25, col="green")
hist((subset(pollution, region==west))$counties, cpl="green")
hist((subset(pollution, region=="west"))$counties, cpl="green")
hist((subset(pm25, region=="west"))$counties, cpl="green")
hist((subset(pollution, region=="west"))$counties, col="green")
hist(subset(pollution, region=="west"), col="green")
hist(subset(pollution$pm25, region=="west"), col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
plot(pollution, latitude, pm25)
with(pollution, plot(latitude, pm25))
abline(horizontal=12)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col="pollution$region")
plot(pollution$latitude, ppm, col="pollution$region")
red
plot(pollution$latitude, ppm, col="red")
plot(pollution$latitude, ppm, col = pollution$region
)
abline(h=12, lwd=2, lty=2)
par(mfrow= c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude,west$pm25, main="West")
plot(east$latitude,east$pm25, main="East")
swirl()
library("swirl")
swirl()
?Devices
plot(faithful)
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(cars$speed, cars$dist, "SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
state
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1)
)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axix="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, month==5)
names(airquality)
may <- subset(airquality, Month==5)
points()
points(may, plot(Wind, Ozone))
points(may, plot(wind, Ozone))
points(may, plot(Wind, Ozone))
bye()
library("swirl")
swirl()
points(may$Wind, may$Ozone, col="blue", pch=3)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, month!=may)
notmay <- subset(airquality, month!==may)
notmay <- subset(airquality, Month!==may)
notmay <- subset(airquality, Month!=5)
notmay
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch=c(17,8), col=c("blue", "red"))
legend("topright", pch=c(17,8), col=c("blue", "red"), ("May", "Other Month")
legend("topright", pch=c(17,8), col=c("blue", "red"), ("May", "Other Month"))
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Month"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone,"Ozone and Wind")
plot(airquality$Wind, airquality$Ozone,main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
dataFile <- "C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
install.packages(lubridate)
install.packages("lubridate")
dataFile <- "C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
dataFile <- "C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1/household_power_consumption.txt"
> data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
> subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
> globalActivePower <- as.numeric(subSetData$Global_active_power)
> png("plot1.png", width=480, height=480)
> hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dataFile <- "C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
cwd()
setwd(C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1)
setwd("C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1")
dataFile <- "C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
dataFile <- "C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
dataFile <- "C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
dataFile <- "C:/Users/Leonardo/Desktop/ExploratoryDataAnalysis/Assignment1/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
